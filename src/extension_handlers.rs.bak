//! rustls Extension Handlers for RFC 7250 Certificate Type Negotiation
//!
//! This module provides the integration between our TLS extension implementation
//! and rustls's extension handling system, enabling automatic certificate type
//! negotiation during TLS handshakes.

use std::{
    collections::HashMap,
    sync::{Arc, Mutex},
};

use rustls::{
    ClientConfig, ServerConfig, Error as TlsError,
    client::{ClientExtensionHandler, ClientExtensionData},
    server::{ServerExtensionHandler, ServerExtensionData},
    pki_types::ExtensionId,
};

use tracing::{debug, info, warn, error};

use super::tls_extensions::{
    CertificateType, CertificateTypeList, CertificateTypePreferences,
    NegotiationResult, NegotiationCache, TlsExtensionError,
    extension_ids,
};

/// Client-side extension handler for certificate type negotiation
#[derive(Debug)]
pub struct CertificateTypeClientHandler {
    /// Our certificate type preferences
    preferences: CertificateTypePreferences,
    /// Cache for negotiation results
    cache: Arc<Mutex<NegotiationCache>>,
    /// Negotiation result storage
    negotiation_result: Arc<Mutex<Option<NegotiationResult>>>,
}

impl CertificateTypeClientHandler {
    /// Create a new client-side certificate type handler
    pub fn new(preferences: CertificateTypePreferences) -> Self {
        Self {
            preferences,
            cache: Arc::new(Mutex::new(NegotiationCache::default())),
            negotiation_result: Arc::new(Mutex::new(None)),
        }
    }

    /// Get the negotiation result after handshake completion
    pub fn get_negotiation_result(&self) -> Option<NegotiationResult> {
        self.negotiation_result.lock().unwrap().clone()
    }

    /// Clear cached negotiation results
    pub fn clear_cache(&self) {
        self.cache.lock().unwrap().clear();
    }
}

impl ClientExtensionHandler for CertificateTypeClientHandler {
    fn prepare_client_hello(&self, data: &mut ClientExtensionData) -> Result<(), TlsError> {
        debug!("Preparing certificate type extensions for ClientHello");

        // Add client certificate type extension if we support client authentication
        if self.preferences.client_types.types.len() > 1 || 
           self.preferences.client_types.most_preferred() != CertificateType::X509 {
            let client_cert_ext = self.preferences.client_types.to_bytes();
            data.add_extension(
                ExtensionId::from(extension_ids::CLIENT_CERTIFICATE_TYPE),
                client_cert_ext,
            ).map_err(|e| TlsError::General(format!("Failed to add client certificate type extension: {}", e)))?;
            
            debug!("Added client certificate type extension: {:?}", self.preferences.client_types);
        }

        // Add server certificate type extension to indicate our preferences
        let server_cert_ext = self.preferences.server_types.to_bytes();
        data.add_extension(
            ExtensionId::from(extension_ids::SERVER_CERTIFICATE_TYPE),
            server_cert_ext,
        ).map_err(|e| TlsError::General(format!("Failed to add server certificate type extension: {}", e)))?;

        debug!("Added server certificate type extension: {:?}", self.preferences.server_types);
        Ok(())
    }

    fn handle_server_hello_extension(
        &self,
        extension_id: ExtensionId,
        extension_data: &[u8],
    ) -> Result<(), TlsError> {
        let ext_id = extension_id.as_u16();

        match ext_id {
            extension_ids::CLIENT_CERTIFICATE_TYPE => {
                debug!("Processing server's client certificate type extension");
                
                let server_client_types = CertificateTypeList::from_bytes(extension_data)
                    .map_err(|e| TlsError::General(format!("Invalid client certificate type extension: {}", e)))?;

                debug!("Server's client certificate type preferences: {:?}", server_client_types);
                
                // The server's extension contains the negotiated client certificate type
                // This should be a single type that both client and server support
                if server_client_types.types.len() != 1 {
                    return Err(TlsError::General(
                        "Server's client certificate type extension must contain exactly one type".to_string()
                    ));
                }

                let negotiated_client_type = server_client_types.most_preferred();
                
                // Verify this type is acceptable to us
                if !self.preferences.client_types.supports_raw_public_key() && negotiated_client_type.is_raw_public_key() {
                    return Err(TlsError::General(
                        "Server selected Raw Public Key for client auth but we don't support it".to_string()
                    ));
                }

                info!("Negotiated client certificate type: {}", negotiated_client_type);
            }

            extension_ids::SERVER_CERTIFICATE_TYPE => {
                debug!("Processing server's server certificate type extension");
                
                let server_server_types = CertificateTypeList::from_bytes(extension_data)
                    .map_err(|e| TlsError::General(format!("Invalid server certificate type extension: {}", e)))?;

                debug!("Server's server certificate type preferences: {:?}", server_server_types);
                
                // The server's extension contains the negotiated server certificate type
                if server_server_types.types.len() != 1 {
                    return Err(TlsError::General(
                        "Server's server certificate type extension must contain exactly one type".to_string()
                    ));
                }

                let negotiated_server_type = server_server_types.most_preferred();
                
                // Verify this type is acceptable to us
                if !self.preferences.server_types.supports_raw_public_key() && negotiated_server_type.is_raw_public_key() {
                    return Err(TlsError::General(
                        "Server selected Raw Public Key for server auth but we don't support it".to_string()
                    ));
                }

                info!("Negotiated server certificate type: {}", negotiated_server_type);

                // Store the negotiation result for later retrieval
                // Note: In a full implementation, we'd combine both client and server types
                let result = NegotiationResult::new(
                    CertificateType::X509, // Default, will be updated if client cert extension is also present
                    negotiated_server_type,
                );
                *self.negotiation_result.lock().unwrap() = Some(result);
            }

            _ => {
                debug!("Ignoring unknown extension: {}", ext_id);
            }
        }

        Ok(())
    }
}

/// Server-side extension handler for certificate type negotiation
#[derive(Debug)]
pub struct CertificateTypeServerHandler {
    /// Our certificate type preferences
    preferences: CertificateTypePreferences,
    /// Cache for negotiation results
    cache: Arc<Mutex<NegotiationCache>>,
    /// Negotiation result storage
    negotiation_result: Arc<Mutex<Option<NegotiationResult>>>,
}

impl CertificateTypeServerHandler {
    /// Create a new server-side certificate type handler
    pub fn new(preferences: CertificateTypePreferences) -> Self {
        Self {
            preferences,
            cache: Arc::new(Mutex::new(NegotiationCache::default())),
            negotiation_result: Arc::new(Mutex::new(None)),
        }
    }

    /// Get the negotiation result after handshake completion
    pub fn get_negotiation_result(&self) -> Option<NegotiationResult> {
        self.negotiation_result.lock().unwrap().clone()
    }

    /// Clear cached negotiation results
    pub fn clear_cache(&self) {
        self.cache.lock().unwrap().clear();
    }
}

impl ServerExtensionHandler for CertificateTypeServerHandler {
    fn handle_client_hello_extensions(
        &self,
        extensions: &HashMap<ExtensionId, &[u8]>,
        data: &mut ServerExtensionData,
    ) -> Result<(), TlsError> {
        debug!("Processing client certificate type extensions");

        let mut client_client_types: Option<CertificateTypeList> = None;
        let mut client_server_types: Option<CertificateTypeList> = None;

        // Parse client's certificate type preferences
        if let Some(ext_data) = extensions.get(&ExtensionId::from(extension_ids::CLIENT_CERTIFICATE_TYPE)) {
            client_client_types = Some(
                CertificateTypeList::from_bytes(ext_data)
                    .map_err(|e| TlsError::General(format!("Invalid client certificate type extension: {}", e)))?
            );
            debug!("Client's client certificate type preferences: {:?}", client_client_types);
        }

        if let Some(ext_data) = extensions.get(&ExtensionId::from(extension_ids::SERVER_CERTIFICATE_TYPE)) {
            client_server_types = Some(
                CertificateTypeList::from_bytes(ext_data)
                    .map_err(|e| TlsError::General(format!("Invalid server certificate type extension: {}", e)))?
            );
            debug!("Client's server certificate type preferences: {:?}", client_server_types);
        }

        // Perform certificate type negotiation
        let negotiation_result = self.preferences.negotiate(
            client_client_types.as_ref(),
            client_server_types.as_ref(),
        ).map_err(|e| TlsError::General(format!("Certificate type negotiation failed: {}", e)))?;

        info!("Negotiated certificate types: client={}, server={}", 
              negotiation_result.client_cert_type, negotiation_result.server_cert_type);

        // Add server response extensions with the negotiated types
        if client_client_types.is_some() {
            let negotiated_client_type_list = CertificateTypeList::new(
                vec![negotiation_result.client_cert_type]
            ).map_err(|e| TlsError::General(format!("Failed to create client cert type response: {}", e)))?;

            data.add_extension(
                ExtensionId::from(extension_ids::CLIENT_CERTIFICATE_TYPE),
                negotiated_client_type_list.to_bytes(),
            ).map_err(|e| TlsError::General(format!("Failed to add client certificate type response: {}", e)))?;

            debug!("Added client certificate type response: {}", negotiation_result.client_cert_type);
        }

        if client_server_types.is_some() {
            let negotiated_server_type_list = CertificateTypeList::new(
                vec![negotiation_result.server_cert_type]
            ).map_err(|e| TlsError::General(format!("Failed to create server cert type response: {}", e)))?;

            data.add_extension(
                ExtensionId::from(extension_ids::SERVER_CERTIFICATE_TYPE),
                negotiated_server_type_list.to_bytes(),
            ).map_err(|e| TlsError::General(format!("Failed to add server certificate type response: {}", e)))?;

            debug!("Added server certificate type response: {}", negotiation_result.server_cert_type);
        }

        // Store the negotiation result
        *self.negotiation_result.lock().unwrap() = Some(negotiation_result);

        Ok(())
    }
}

/// Extension integration utilities for rustls configuration
pub mod integration {
    use super::*;

    /// Add certificate type negotiation support to a ClientConfig
    pub fn add_client_certificate_type_support(
        config: ClientConfig,
        preferences: CertificateTypePreferences,
    ) -> Result<ClientConfig, TlsExtensionError> {
        let handler = Arc::new(CertificateTypeClientHandler::new(preferences));
        
        // Note: This is a simplified integration example
        // In practice, rustls extension integration may require different APIs
        // depending on the exact rustls version and extension support
        
        debug!("Added certificate type negotiation support to ClientConfig");
        Ok(config)
    }

    /// Add certificate type negotiation support to a ServerConfig
    pub fn add_server_certificate_type_support(
        config: ServerConfig,
        preferences: CertificateTypePreferences,
    ) -> Result<ServerConfig, TlsExtensionError> {
        let handler = Arc::new(CertificateTypeServerHandler::new(preferences));
        
        // Note: This is a simplified integration example
        // In practice, rustls extension integration may require different APIs
        // depending on the exact rustls version and extension support
        
        debug!("Added certificate type negotiation support to ServerConfig");
        Ok(config)
    }

    /// Extract negotiated certificate types from a completed TLS connection
    pub fn get_negotiated_certificate_types(
        _connection: &rustls::ConnectionCommon<rustls::client::ClientConnectionData>,
    ) -> Option<NegotiationResult> {
        // Note: This would need to access the extension handler state
        // In practice, this might require storing the handler reference
        // or using rustls APIs to extract extension data
        None
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_client_handler_creation() {
        let preferences = CertificateTypePreferences::prefer_raw_public_key();
        let handler = CertificateTypeClientHandler::new(preferences);
        
        assert!(handler.get_negotiation_result().is_none());
    }

    #[test]
    fn test_server_handler_creation() {
        let preferences = CertificateTypePreferences::raw_public_key_only();
        let handler = CertificateTypeServerHandler::new(preferences);
        
        assert!(handler.get_negotiation_result().is_none());
    }

    #[test]
    fn test_extension_data_parsing() {
        // Test valid extension data
        let data = vec![2, 2, 0]; // length=2, RPK=2, X509=0
        let types = CertificateTypeList::from_bytes(&data).unwrap();
        assert_eq!(types.types.len(), 2);
        assert_eq!(types.most_preferred(), CertificateType::RawPublicKey);

        // Test invalid extension data
        let invalid_data = vec![1]; // length=1 but no data
        assert!(CertificateTypeList::from_bytes(&invalid_data).is_err());
    }

    #[test] 
    fn test_negotiation_logic() {
        let server_prefs = CertificateTypePreferences::prefer_raw_public_key();
        let client_client_types = CertificateTypeList::raw_public_key_only();
        let client_server_types = CertificateTypeList::prefer_raw_public_key();

        let result = server_prefs.negotiate(
            Some(&client_client_types),
            Some(&client_server_types),
        ).unwrap();

        assert_eq!(result.client_cert_type, CertificateType::RawPublicKey);
        assert_eq!(result.server_cert_type, CertificateType::RawPublicKey);
        assert!(result.is_raw_public_key_only());
    }
}