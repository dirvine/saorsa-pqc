[package]
name = "saorsa-pqc"
version = "0.1.0"
edition = "2024"
authors = ["David Irvine <david@saorsalabs.com>"]
license = "MIT OR Apache-2.0"
description = "Post-Quantum Cryptography library for Saorsa Labs projects"
homepage = "https://github.com/dirvine/saorsa-pqc"
repository = "https://github.com/dirvine/saorsa-pqc"
documentation = "https://docs.rs/saorsa-pqc"
keywords = ["cryptography", "post-quantum", "ml-kem", "ml-dsa", "quic"]
categories = ["cryptography", "network-programming"]
readme = "README.md"
rust-version = "1.85.0"

[lib]
name = "saorsa_pqc"
path = "src/lib.rs"

[features]
default = ["aws-lc-rs"]

# Crypto providers (choose one)
aws-lc-rs = ["dep:aws-lc-rs", "dep:ring"]
rustls-ring = ["dep:ring"]

# Post-Quantum Cryptography support
pqc = ["aws-lc-rs"]


# Performance features
parallel = ["dep:rayon"]
memory-pool = []

# Testing features
test-utils = []
benchmarks = []

[dependencies]
# Core cryptography
aws-lc-rs = { version = "1.8", optional = true, features = ["unstable"] }
ring = { version = "0.17", optional = true }

# Async and concurrency
tokio = { version = "1.35", features = ["rt", "net", "sync", "time", "macros"] }
futures = "0.3"

# Classical cryptography for hybrid modes
x25519-dalek = "2.0"
curve25519-dalek = "4.1"
ed25519-dalek = { version = "2.0", features = ["rand_core"] }

# Symmetric encryption (quantum-resistant)
chacha20poly1305 = "0.10"
pbkdf2 = { version = "0.12", features = ["simple"] }

# Serialization and data handling
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"

# Random and hash
rand = "0.8"
sha2 = "0.10"
blake3 = "1.8"

# Error handling and secure memory
thiserror = "1.0"
anyhow = "1.0"
zeroize = { version = "1.8", features = ["derive"] }

# Logging and tracing
tracing = "0.1"
log = "0.4"

# Networking
bytes = "1.5"

# Parallel processing (optional)
rayon = { version = "1.8", optional = true }

# Time utilities
time = { version = "0.3", features = ["std", "formatting", "parsing"] }

[dev-dependencies]
tokio-test = "0.4"
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"
hex = "0.4"
once_cell = "1.19"

# Benchmarks will be added once the crate structure is stable
# [[bench]]
# name = "ml_kem_benchmarks"
# harness = false
# required-features = ["aws-lc-rs"]

[profile.release]
lto = true
codegen-units = 1
panic = "abort"
opt-level = 3

[profile.bench]
debug = true
lto = true
codegen-units = 1

# Documentation settings
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# Security audit settings
[package.metadata.audit]
ignore = []

# Clippy settings for ultra-quality standards
[package.metadata.clippy]
msrv = "1.85.0"

[lints.rust]
unsafe_code = "forbid"
missing_docs = "warn"
unused_must_use = "deny"

[lints.clippy]
# Performance lints
unnecessary_clone = "deny"
inefficient_to_string = "deny"
large_enum_variant = "deny"
large_stack_arrays = "deny"
too_many_arguments = "deny"

# Correctness lints
indexing_slicing = "deny"
integer_arithmetic = "warn"
unwrap_used = "deny"
expect_used = "deny"
panic = "deny"
unimplemented = "deny"
todo = "deny"

# Style lints
enum_glob_use = "deny"
wildcard_imports = "deny"
redundant_closure = "deny"
redundant_field_names = "deny"

# Complexity lints
cognitive_complexity = "warn"
cyclomatic_complexity = "warn"

# Pedantic lints for ultra-quality
pedantic = "warn"
nursery = "warn"