[package]
name = "saorsa-pqc"
version = "0.3.0"
edition = "2021"
authors = ["David Irvine <david@saorsalabs.com>"]
license = "MIT OR Apache-2.0"
description = "Post-Quantum Cryptography library for Saorsa Labs projects"
homepage = "https://github.com/dirvine/saorsa-pqc"
repository = "https://github.com/dirvine/saorsa-pqc"
documentation = "https://docs.rs/saorsa-pqc"
keywords = ["cryptography", "post-quantum", "ml-kem", "ml-dsa", "quic"]
categories = ["cryptography", "network-programming"]
readme = "README.md"
rust-version = "1.85.0"
exclude = ["tests/nist_vectors/*", "*.profraw", "scripts/*"]

[lib]
name = "saorsa_pqc"
path = "src/lib.rs"

[features]
# All security and performance features enabled by default
default = [
    "aws-lc-rs", 
    "pqc", 
    "parallel", 
    "memory-pool", 
    "secure-memory", 
    "constant-time",
    "simd"
]

# Crypto providers (aws-lc-rs is default and preferred)
aws-lc-rs = ["dep:aws-lc-rs", "dep:ring"]
rustls-ring = ["dep:ring"]

# Post-Quantum Cryptography support (always enabled by default)
pqc = ["aws-lc-rs"]

# Performance features (enabled by default)
parallel = []
memory-pool = []

# Security features (enabled by default) 
secure-memory = []
constant-time = []
simd = ["dep:wide"]

# Optional development features (not enabled by default)
cert_compression = []
dangerous_configuration = []
test-utils = []
benchmarks = []

[dependencies]
# NIST Post-Quantum Cryptography Standards
fips203 = { version = "0.4", features = ["default-rng"] }  # ML-KEM (Kyber)
fips204 = { version = "0.4", features = ["default-rng"] }  # ML-DSA (Dilithium)
fips205 = { version = "0.4", features = ["default-rng"] }  # SLH-DSA (SPHINCS+)

# Core cryptography
aws-lc-rs = { version = "1.8", optional = true, features = ["unstable"] }
ring = { version = "0.17", optional = true }

# Async and concurrency
tokio = { version = "1.35", features = ["rt", "net", "sync", "time", "macros"] }
futures = "0.3"

# Classical cryptography for hybrid modes
x25519-dalek = "2.0"
curve25519-dalek = "4.1"
ed25519-dalek = { version = "2.0", features = ["rand_core"] }

# Symmetric encryption (quantum-resistant)
chacha20poly1305 = "0.10"
pbkdf2 = { version = "0.12", features = ["simple"] }

# Serialization and data handling
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"

# Random and hash
rand = "0.8"
sha2 = "0.10"
sha3 = "0.10"
blake3 = "1.8"

# Error handling and secure memory
thiserror = "1.0"
anyhow = "1.0"
zeroize = { version = "1.8", features = ["derive"] }
libc = "0.2"

# Logging and tracing
tracing = "0.1"
log = "0.4"

# Networking
bytes = "1.5"

# Parallel processing (enabled by default)
rayon = { version = "1.8" }

# Time utilities
time = { version = "0.3", features = ["std", "formatting", "parsing"] }

# Constant-time operations (always available)
subtle = { version = "2.5" }

# SIMD acceleration for high-performance crypto
wide = { version = "0.7", optional = true }
rand_core = { version = "0.6.4", features = ["std", "getrandom"] }

[dev-dependencies]
# Existing dependencies
tokio-test = "0.4"
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"
hex = "0.4"
once_cell = "1.19"

# Additional test dependencies for comprehensive testing
serde_json = "1.0"
lazy_static = "1.4"
tempfile = "3.8"

# For performance profiling
pprof = { version = "0.13", features = ["flamegraph"] }

# Additional test dependencies
slh-dsa = "0.0.3"  # Alternative SLH-DSA implementation for cross-validation


# Test configuration for specific test suites
[[test]]
name = "ml_kem_tests"
path = "tests/ml_kem_tests.rs"
required-features = ["aws-lc-rs"]

[[test]]
name = "ml_dsa_tests"
path = "tests/ml_dsa_tests.rs"
required-features = ["aws-lc-rs"]

[[test]]
name = "property_tests"
path = "tests/property_tests.rs"
required-features = ["test-utils", "aws-lc-rs"]

# Benchmarks
[[bench]]
name = "ml_kem_benchmarks"
path = "benches/ml_kem_benchmarks.rs"
harness = false
required-features = ["aws-lc-rs", "benchmarks"]

[[bench]]
name = "ml_dsa_benchmarks"
path = "benches/ml_dsa_benchmarks.rs"
harness = false
required-features = ["aws-lc-rs", "benchmarks"]

[[bench]]
name = "comprehensive_benchmarks"
path = "benches/comprehensive_benchmarks.rs"
harness = false

[profile.release]
lto = true
codegen-units = 1
panic = "abort"
opt-level = 3

[profile.bench]
debug = true
lto = true
codegen-units = 1

# Documentation settings
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# Security audit settings
[package.metadata.audit]
ignore = []

# Clippy settings for ultra-quality standards
[package.metadata.clippy]
msrv = "1.85.0"

# Test coverage configuration
[package.metadata.tarpaulin]
ignore-config = true
exclude-files = [
    "tests/*",
    "benches/*",
    "examples/*"
]
out = ["Html", "Xml"]
output-dir = "target/tarpaulin"
timeout = 300

[lints.rust]
unsafe_code = "forbid"
missing_docs = "warn"
unused_must_use = "deny"

[lints.clippy]
# Performance lints
inefficient_to_string = "deny"
large_enum_variant = "deny"
large_stack_arrays = "deny"
too_many_arguments = "deny"

# Correctness lints
indexing_slicing = "deny"
arithmetic_side_effects = "warn"
unwrap_used = "deny"
expect_used = "deny"
panic = "deny"
unimplemented = "deny"
todo = "deny"

# Style lints
enum_glob_use = "deny"
wildcard_imports = "deny"
redundant_closure = "deny"
redundant_field_names = "deny"

# Complexity lints
cognitive_complexity = "warn"

# Pedantic lints for ultra-quality
pedantic = "warn"
nursery = { level = "warn", priority = -1 }
